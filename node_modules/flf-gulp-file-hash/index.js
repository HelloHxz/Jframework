
var md5 	= require('./md5'),
	through = require('through2'),
	path 	= require('path')

var cwd;

global.filenameMd5Map = {};

function hash() {
	return through.obj(function(file, enc, cb) {
		cwd = file.cwd;

		if( file.isNull() ) {
			this.push( file );
			return cb();
		}

		if( file.isBuffer() ) {
			var res = md5( file.contents.toString() );
			global.filenameMd5Map[ file.history[file.history.length - 1] ] = res;
			// file.contents = new Buffer( res );
			this.push( file );
			return cb();
		}

		if( file.isStream() ) {
			throw new Error('file-hash does not support Stream !')
		}
	});
}


// 必须制定任务最重生成相对当前 gulpfile 路径, 和gulp.dest传入路径相同

//gulp.pipe中使用
hash.url = function(rel) {
	return through.obj(function(file, enc, cb) {
		if( file.isBuffer() ) {
			var res = file.contents.toString().replace(/\{\{(.+)\}\}/g, function($0, $1) {
				$1 = $1.replace(/^\s+|\s+$/g, '');
				var key = path.join( cwd, rel, $1 );
				if( key in  global.filenameMd5Map ) {
					return $1 + '?' + String(global.filenameMd5Map[key]).substr(-10);
				} else {
					return $1;
				}
			})

			file.contents = new Buffer( res );
			this.push( file );
		}
		cb();
	})
}


//传入模板引擎做函数调用
hash.url2 = function(rel) {
	return function(url) {
		var key = path.join(cwd, rel, url);
		if( key in global.filenameMd5Map ) {
			return url + '?' + String(global.filenameMd5Map[key]).substr(-10);
		} else {
			return url;
		}
	}
}

module.exports = hash